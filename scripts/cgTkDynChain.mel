//
//				Copyright ?2004 CGTOOLKIT. All rights reserved
//								www.cgtoolkit.com
//		
//							- AUTO-DYNAMIC JOINT CHAIN -
//			This script will automate the task of making a joint chain dynamic.
//			The joint chain will flop around dynamically using the Maya Hair engine.
//
//			Directions: 
//			Select base joint, shift select tip joint and click 'Make Dynamic'.
//			PLEASE NOTE: This script uses Maya Hair to generate the dynamic secondary
//			motion. You must have Maya Unlimited v6.0 or greater to use this script.
//
//			Basic Procedure:
//			-A CV curve is created through the joint chain.
//			-The curve is attached to a spline ik handle that runs through the chain.
//			-The curve is made dynamic using Maya Hair.
//
//
//

/////////////////////////////////////////////////////////////////////////////////////////
//								dynJointChain procedure
/////////////////////////////////////////////////////////////////////////////////////////
global proc dynJointChain ()
{
	//Store the current selection into an string array.
	string $sel[] = `ls -sl`;
	//Store the name of the base and end joints into strings.
	string $baseJoint = $sel[0];
	string $endJoint = $sel[1];
	//Create a vector array to store the world space coordinates of the joints.
	vector $jointPos[];
	//String variable to house current joint being queried in the while loop.
	string $currentJoint = $baseJoint;
	//Counter integer used in the while loop to determine the proper index in the vector array.
	int $counter = 0;
	//Initial selection going into the while loop/
	select $baseJoint;
	
	//Will loop through all the joints between the base and end by pickwalking through them.
	//The loop stores the world space of each joint into $jointPos as it iterates over them.
	while ($currentJoint != $endJoint)
	{
		$jointPos[$counter] = `joint -q -p -a $currentJoint`;
		pickWalk -d down;
		$sel = `ls -sl`;
		$currentJoint = $sel[0];
		$counter++;
	} 
	
	//Theses 3 lines store the position of the end joint that the loop will miss.
	$sel = `ls -sl`;
	$currentJoint = $sel[0];
	$jointPos[$counter] = `joint -q -p -a $currentJoint`;
		
	//Now that $jointPos[] holds the world space coords of our joints, we need to build a cv curve
	//with points at each XYZ coord.
	
	//This string will house the command to create our curve.
	string $buildCurve = "curve -d 1 ";
	//Another counter integer for the for loop
	int $cvCounter = 0;
	
	//Loops over and adds the position of each joint to the buildCurve string.
	while ($cvCounter <= $counter)
	{
		$buildCurve = ($buildCurve + " -p " + $jointPos[$cvCounter]);
		$cvCounter++;
	}
	
	//Adds the end terminator to the build curve command
	$buildCurve = $buildCurve + ";";
	//Evaluates the $buildCurve string as a Maya command. (creates the curve running through the joints)
	string $nameOfCurve = `eval ($buildCurve)`;
	
	//Make curve dynamic.
	select $nameOfCurve;
	makeCurvesDynamicHairs 1 0 1;
	
	//Determine what the name of the dynamic curve is
	string $nameOfDynCurve;
	int $sizeOfString = `size($nameOfCurve)`;
	$sizeOfString++;
	$nameOfDynCurve = `substring $nameOfCurve 6 $sizeOfString` ;
	$sizeOfString = $nameOfDynCurve;
	$sizeOfString++;
	$nameOfDynCurve = ("curve" + $sizeOfString);

	//Display Current Position of Hair
	select $nameOfDynCurve;
	displayHairCurves "current" 1;
	
	//Determine name of follicle node
	select $nameOfCurve;
	string $nameOfFollicle[] = `pickWalk -d up`;

	//Create Joint Chain Controller Object
	string $jointCtrlObjArray[];
	$jointCtrlObjArray[0] = `createNode implicitSphere`;
	$jointCtrlObjArray = `pickWalk -d up`;
	
	string $jointCtrlObj = $jointCtrlObjArray[0];
	
	//Point Constrain Control Object to the end joint
	pointConstraint $endJoint $jointCtrlObj;
	
	//Add attributes to controller for the dynamics
	addAttr -ln stiffness -at double -min 0 -max 1 -dv 0.001 -keyable true  $jointCtrlObj;
	addAttr -ln lengthFlex -at double  -min 0 -max 1 -dv 0 -keyable true $jointCtrlObj;
	addAttr -ln damping -at double -min 0 -max 100 -dv 0 -keyable true  $jointCtrlObj;
	addAttr -ln "drag" -at double -min 0 -max 1 -dv .05 -keyable true  $jointCtrlObj;
	addAttr -ln friction -at double -min 0 -max 1 -dv 0.5 -keyable true  $jointCtrlObj;
	addAttr -ln "gravity" -at double -min 0 -max 10 -dv 1 -keyable true  $jointCtrlObj;
	addAttr -ln "turbulenceCtrl" -at bool -keyable true  $jointCtrlObj;
	setAttr -lock on ($jointCtrlObj + ".turbulenceCtrl");
	addAttr -ln "strength" -at double -min 0 -max 1 -dv 0 -keyable true  $jointCtrlObj;
	addAttr -ln "frequency" -at double -min 0 -max 2 -dv 0.2 -keyable true  $jointCtrlObj;
	addAttr -ln "speed" -at double -min 0 -max 2 -dv 0.2 -keyable true  $jointCtrlObj;
	
	//Determine what the name of the hair system is
	string $nameOfHairSystem;
	int $sizeOfString = `size($nameOfFollicle[0])`;
	$sizeOfString++;
	$nameOfHairSystem = `substring $nameOfFollicle[0] 9 $sizeOfString` ;
	$sizeOfString = $nameOfHairSystem;
	$nameOfHairSystem = ("hairSystemShape" + $sizeOfString);
	
	//Add special attribute to house name of hairSystem
	addAttr -ln nameOfHairShapeNode -dt "string" -keyable false $jointCtrlObj;
	setAttr -type "string" -lock true ($jointCtrlObj + ".nameOfHairShapeNode") ($nameOfHairSystem);
	
	//Add special attribute to house name of follicle
	addAttr -ln nameOfFollicleNode -dt "string" -keyable false $jointCtrlObj;
	setAttr -type "string" -lock true ($jointCtrlObj + ".nameOfFollicleNode") ($nameOfFollicle[0]);
	
	//Add special attribute to house name of dynamic curve
	addAttr -ln nameOfDynCurve -dt "string" -keyable false $jointCtrlObj;
	setAttr -type "string" -lock true ($jointCtrlObj + ".nameOfDynCurve") ($nameOfDynCurve);
	
	//Add special attribute to base and end joint names
	addAttr -ln baseJoint -dt "string" -keyable false $jointCtrlObj;
	addAttr -ln endJoint -dt "string" -keyable false $jointCtrlObj;
	setAttr -type "string" -lock true ($jointCtrlObj + ".baseJoint") ($baseJoint);
	setAttr -type "string" -lock true ($jointCtrlObj + ".endJoint") ($endJoint);
	
	//Overide the Hair dynamics so that the follicle controls the curve dynamics
	select $nameOfFollicle;
	$nameOfFollicle = `pickWalk -d down`;
	setAttr ($nameOfFollicle[0] + ".overrideDynamics") 1;
	
	//Set the dynamic chain to hang from the base joint (not both ends)
	setAttr ($nameOfFollicle[0] + ".pointLock") 1;
	
	//Connect attributes on the controller sphere to the follicle node
	connectAttr -f ($jointCtrlObj +".stiffness") ($nameOfFollicle[0] + ".stiffness");
	connectAttr -f ($jointCtrlObj +".lengthFlex") ($nameOfFollicle[0] + ".lengthFlex");
	connectAttr -f ($jointCtrlObj +".damping") ($nameOfFollicle[0] + ".damp");
	//Connect attribute on the controller sphere to the hair system node
	connectAttr -f ($jointCtrlObj +".drag") ($nameOfHairSystem + ".drag");
	connectAttr -f ($jointCtrlObj +".friction") ($nameOfHairSystem + ".friction");
	connectAttr -f ($jointCtrlObj +".gravity") ($nameOfHairSystem + ".gravity");
	connectAttr -f ($jointCtrlObj +".strength") ($nameOfHairSystem + ".turbulenceStrength");
	connectAttr -f ($jointCtrlObj +".frequency") ($nameOfHairSystem + ".turbulenceFrequency");
	connectAttr -f ($jointCtrlObj +".speed") ($nameOfHairSystem + ".turbulenceSpeed");
	
	//Lock And Hide Attributes on Control Object.
	setAttr -lock true -keyable false ($jointCtrlObj + ".tx");
	setAttr -lock true -keyable false ($jointCtrlObj + ".ty");
	setAttr -lock true -keyable false ($jointCtrlObj + ".tz");
	setAttr -lock true -keyable false ($jointCtrlObj + ".rx");
	setAttr -lock true -keyable false ($jointCtrlObj + ".ry");
	setAttr -lock true -keyable false ($jointCtrlObj + ".rz");
	setAttr -lock true -keyable false ($jointCtrlObj + ".sx");
	setAttr -lock true -keyable false ($jointCtrlObj + ".sy");
	setAttr -lock true -keyable false ($jointCtrlObj + ".sz");
	
	//Build the splineIK handle using the dynamic curve.
	select $baseJoint $endJoint $nameOfDynCurve;
	ikHandle -sol ikSplineSolver -ccv false ;
	rename ($baseJoint + "ikHandle");
	
	//Rename Ctrl Obj
	rename $jointCtrlObj ($baseJoint + "DynChainControl");
	
	//Parent follicle node to the parent of the base joint
	//This will attach the joint chain to the rest of the heirarchy if there is one.
	select $nameOfFollicle[0];
	pickWalk -d up;
	string $follicleGrpNode[];
	$follicleGrpNode = `pickWalk -d up`;
	//Determine parent of base joint
	select $baseJoint;
	string $parentOfBaseJoint[];
	$parentOfBaseJoint = `pickWalk -d up`;
	//Parent the follicle into heirarchy
	parent $follicleGrpNode $parentOfBaseJoint;
	parent -w $nameOfDynCurve;
	
	//Set dynamic chain attributes according to creation options
	float $sliderStiffness = `floatSlider -query -value sliderStiffness`;
	float $sliderDamping = `floatSlider -query -value sliderDamping`;
	float $sliderDrag = `floatSlider -query -value sliderDrag`;
	setAttr ($baseJoint + "DynChainControl.stiffness") $sliderStiffness;
	setAttr ($baseJoint + "DynChainControl.damping") $sliderDamping;
	setAttr ($baseJoint + "DynChainControl.drag") $sliderDrag;
	
	//Select dynamic chain controller for user
	select ($baseJoint + "DynChainControl");
	
	//Print feedback for user
	print "Dynamic joint chain successfully setup!";
	
}


/////////////////////////////////////////////////////////////////////////////////////////
//								Collisions Procedure
/////////////////////////////////////////////////////////////////////////////////////////

global proc collideWithChain ()
{
	string $initialSel[] = `ls -sl`;
	string $chainCtrl = $initialSel[0];
	string $hairShape = `getAttr ($chainCtrl + ".nameOfHairShapeNode")`;
	string $obj;
	string $objShape[];
	
	for ($obj in $initialSel)
	{
		//Get the shape node of the collider geo
		$objShape[0] = $obj;
		select $objShape;
		$objShape = `pickWalk -d down`;
		
		if ($obj != $chainCtrl)
		{
			//Create geoConnector node and store it's name into a variable
			string $nameofGeoConnector = `createNode geoConnector`;
		
			//Connect all the necessary attributes to make the surface collide
			connectAttr ($objShape[0] +".message") ($nameofGeoConnector + ".owner");
			connectAttr ($objShape[0] +".worldMatrix[0]") ($nameofGeoConnector + ".worldMatrix");
			connectAttr ($objShape[0] +".outMesh") ($nameofGeoConnector + ".localGeometry");
			connectAttr -na ($nameofGeoConnector + ".resilience") ($hairShape + ".collisionResilience");
			connectAttr -na ($nameofGeoConnector + ".friction") ($hairShape + ".collisionFriction");
			connectAttr -na ($nameofGeoConnector + ".sweptGeometry") ($hairShape + ".collisionGeometry");
			connectAttr time1.outTime ($nameofGeoConnector + ".currentTime");

			//Print output to the user for each connected collider.
			print ($obj + " has been set to collide with " + $chainCtrl + "\n");
		}
	}
}


/////////////////////////////////////////////////////////////////////////////////////////
//								BAKING PROCEDURE
/////////////////////////////////////////////////////////////////////////////////////////

global proc bakeDynChain ()
{
	//Declare necessary variables
	string $initialSel[] = `ls -sl`;
	string $chainCtrl = $initialSel[0];
	string $baseJoint = `getAttr ($chainCtrl + ".baseJoint")`;
	string $endJoint = `getAttr ($chainCtrl + ".endJoint")`;
	string $bakingJoints = "{\"" ;
	string $currentJoint[]; 
	$currentJoint[0] = $endJoint;
	
	//Construct frame range variable
	string $frameRangeToBake;
	float $startFrame = `intField -query -value startFrame`;
	float $endFrame = `intField -query -value endFrame`;
	$frameRangeToBake = ("\"" + $startFrame + ":" + $endFrame + "\"");
	
	//Determine joints to be baked
	while ($currentJoint[0] != $baseJoint)
	{
		$bakingJoints = ($bakingJoints +$currentJoint[0] + "\", \"");
		select $currentJoint[0];
		$currentJoint = `pickWalk -d up`;
	}
	
	//Add the base joint that the while loop will miss
	$bakingJoints = ($bakingJoints + $baseJoint + "\"}");
	
	//Concatenate the bake simulation command with the necessary joint names.
	$bakingJoints = ("bakeResults -simulation true -t " + $frameRangeToBake + " -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -controlPoints false -shape true" + $bakingJoints);
	
	//Evaluate the $bakingJoints string to bake the simulation.
	eval $bakingJoints;
	
	//Print feedback to user
	print ("All joints controlled by " + $chainCtrl + " have now been baked!\n");

}

/////////////////////////////////////////////////////////////////////////////////////////
//								DELETE DYNAMICS PROCEDURE
/////////////////////////////////////////////////////////////////////////////////////////

global proc deleteDynChain ()
{
	//Declare necessary variables
	string $initialSel[] = `ls -sl`;
	string $chainCtrl = $initialSel[0];
	
	//Delete Hair System Node
	string $hairSystemName[];
	$hairSystemName[0] = `getAttr ($chainCtrl + ".nameOfHairShapeNode")`;
	select $hairSystemName[0];
	$hairSystemName = `pickWalk -d up`;
	delete $hairSystemName;
	
	//Delete Follicle Node
	string $follicleNode[];
	$follicleNode[0] = `getAttr ($chainCtrl + ".nameOfFollicleNode")`;
	select $follicleNode[0];
	$follicleNode = `pickWalk -d up`;
	delete $follicleNode;
	
	//Delete Dynamic Hair Curve
	delete `getAttr ($chainCtrl + ".nameOfDynCurve")`;
	
	//Delete hair output curves node
	$hairSystemName[0] = ($hairSystemName[0] + "OutputCurves");
	delete $hairSystemName;
	
	//Delete IK Handle
	string $baseJoint = `getAttr ($chainCtrl + ".baseJoint")`;
	delete ($baseJoint + "ikHandle");
	
	//Delete control object
	delete $chainCtrl;
	
	//Print feedback to the user.
	print "Dynamics have been deleted from the chain.";
}




/////////////////////////////////////////////////////////////////////////////////////////
//								MAIN WINDOW
/////////////////////////////////////////////////////////////////////////////////////////

global proc cgTkDynChain ()
{
	
	if (`window -q -ex dynChainWindow`) deleteUI dynChainWindow;
	
	//Main Window
	window -title "CG Toolkit - Auto Dynamic Joint Chain" -w 330 -h 200 dynChainWindow;
	scrollLayout -hst 0;
	columnLayout dynChainColumn;
	
	//Dynamic Chain Creation Options Layout
	frameLayout -w 300 -h 130 -borderStyle etchedOut -collapsable true -label "Dynamic Chain Creation Options:" creationOptions;
	frameLayout -e -cl true creationOptions;
	columnLayout ;
	text "Stiffness :";
	floatSlider -min 0 -max 1 -value 0.001 sliderStiffness;
	text "Damping :";
	floatSlider -min 0 -max 100 -value 0 sliderDamping;
	text "Drag :";
	floatSlider -min 0 -max 1 -value 0.05 sliderDrag;
	setParent..;
	setParent..;
	
	//Button Layouts
	rowColumnLayout -nc 2 -cw 1 175 -cw 2 150;
	text "Select base joint, shift select tip: ";
	button -label "Make Dynamic" -c "dynJointChain";
	text "Select control, shift select collider(s): ";
	button -label "Make Collide" -c "collideWithChain";
	text "Select control: ";
	button -label "Delete Dynamics" -c "deleteDynChain";
	setParent..;
	
	//Bake Animation Layouts
	text " ";
	separator -w 330;
	text "                               -Bake Joint Animation-";
	rowColumnLayout -nc 3 -cw 1 100 -cw 2 100 bakeRowColumn;
	text "Start Frame: ";
	text "End Frame:";
	text "Select Control:";
	intField startFrame;
	intField -value 400 endFrame;
	button -label "Bake Dynamics" -c "bakeDynChain";
	
	//Show Main Window Command
	showWindow dynChainWindow;
}
