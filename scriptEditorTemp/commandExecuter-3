{
{
string $window = "makeIKFKSwitchWindow";
if(`window -ex $window`) deleteUI -wnd $window;
if(`windowPref -ex $window`)windowPref -r $window;
window -t "Make IKFK Switch Window" -w 286 -h 200 $window;
string $layout = `formLayout`;

string $IKLabel = `text-w 80 -h 20 -l "IK ' tail"  IKLabel`;
string $FKLabel = `text -w 80 -h 20 -l "FK ' tail"  FKLabel`;
string $SKLabel = `text -w 80 -h 20 -l "SK ' tail"  SKLabel`;

string $IKTail = `textField -w 80 -h 25 -tx "_IK" -bgc 0.894 0.966 0.791 IKTail`;
string $FKTail = `textField -w 80 -h 25 -tx "_FK" -bgc 0.894 0.966 0.791 FKTail`;
string $SKTail = `textField -w 80 -h 25 -tx "_SK" -bgc 0.894 0.966 0.791 SKTail`;
string $DuplicateIKFKJoint = `button -l "Make      IKFK      Switch    (Select  Joint's and check)" -w 270 -h 30 -c "MakeSwitch" DuplicateIKFKJoint`;
string $RigFKJoint = `button -l "Rig        FK      Joint       (Select FK Joint's and check)" -w 270 -h 30 -c "RigFKJoint" RigFKJoint`;
string $NotEnd = `text -l "Î´........" -w 270 -h 30 NotEnd`;


formLayout -edit

-attachForm $IKLabel "top" 2
-attachForm $IKLabel "left" 8

-attachForm     $FKLabel "top" 2
-attachControl  $FKLabel "left" 15 $IKLabel

-attachForm $SKLabel "top" 2
-attachControl  $SKLabel "left" 15 $FKLabel

-attachControl  $IKTail "top" 0 $IKLabel
-attachForm     $IKTail "left" 8

-attachControl  $FKTail "top" 0 $FKLabel
-attachControl  $FKTail "left" 15 $IKTail

-attachControl  $SKTail "top" 0 $SKLabel
-attachControl  $SKTail "left" 15 $FKTail

-attachControl  $DuplicateIKFKJoint "top" 8 $IKTail
-attachForm     $DuplicateIKFKJoint "left" 8

-attachControl  $RigFKJoint "top" 8 $DuplicateIKFKJoint
-attachForm     $RigFKJoint "left" 8

-attachControl  $NotEnd "top" 16 $RigFKJoint
-attachForm     $NotEnd "left" 8

$layout;
showWindow $window;
}
proc MakeSwitch()
{
string $SKTailCy = `textField -q -tx SKTail`;
string $FKTailCy = `textField -q -tx FKTail`;
string $IKTailCy = `textField -q -tx IKTail`;

cutCopyPaste "copy";
select -hi;
string $OrinalSKJoint[] = `ls -sl`;
int    $JointSize = `size $OrinalSKJoint`;
int $i;
       for($i = 0;$i < $JointSize;$i++)
       {
       rename $OrinalSKJoint[$i] ($OrinalSKJoint[$i] + $SKTailCy);
       }
string $LastSKJoint[] = `ls -sl`;

cutCopyPaste "paste";
ungroup -w;
select -hi;
string $OrinalFKJoint[] = `ls -sl`;
       for($i = 0;$i < $JointSize;$i++)
       {
       rename $OrinalFKJoint[$i] ($OrinalSKJoint[$i] + $FKTailCy);
       }
string $LastFKJoint[] = `ls -sl`;


cutCopyPaste "paste";
ungroup -w;
select -hi;
string $OrinalIKJoint[] = `ls -sl`;
       for($i = 0;$i < $JointSize;$i++)
       {
       rename $OrinalIKJoint[$i] ($OrinalSKJoint[$i] + $IKTailCy);
       }
string $LastIKJoint[] = `ls -sl`;


addAttr -sn IKFK -ln IKFK -dv 0 -min 0 -max 1 -k 1 $LastSKJoint[0];
string $ReverseNode = `createNode -n ($LastSKJoint[0] + "_ReverseNode") reverse`;
connectAttr ($LastSKJoint[0] + ".IKFK") ($ReverseNode + ".inputX");

       for($i = 0;$i < $JointSize;$i++)
       {
       orientConstraint -offset 0 0 0 -weight 1 $LastFKJoint[$i] $LastSKJoint[$i];
       orientConstraint -offset 0 0 0 -weight 1 $LastIKJoint[$i] $LastSKJoint[$i];
       
       string $Constraint[] = `listRelatives -c -type "orientConstraint" $LastSKJoint[$i]`;
       connectAttr ($LastSKJoint[0]+ ".IKFK") ($Constraint[0] + "." + $LastFKJoint[$i] + "W0");
       connectAttr ($ReverseNode + ".outputX") ($Constraint[0] + "." + $LastIKJoint[$i] + "W1");
       
       string $ScaleBlendNode = `createNode -n ($LastSKJoint[$i] + "ScaleBlend") blendColors`;
       connectAttr ($LastFKJoint[$i] + ".scale") ($ScaleBlendNode + ".color1");
       connectAttr ($LastIKJoint[$i] + ".scale") ($ScaleBlendNode + ".color2");
       connectAttr ($ScaleBlendNode + ".output") ($LastSKJoint[$i] + ".scale");
       connectAttr ($LastSKJoint[0] + ".IKFK") ($ScaleBlendNode + ".blender");
       
       }
}

proc RigFKJoint()
{
string $SelFkJoint[] = `ls -sl`;
string $SelFkJoinrChildren[] = `listRelatives -ad -type "joint" $SelFkJoint[0]`;
string $thisSelJoints[] = stringArrayCatenate($SelFkJoint,$SelFkJoinrChildren);
string $EveryFK;
       for($EveryFK in $thisSelJoints)
       {
       string $Control[] = `circle -n ($EveryFK + "_Ctr") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1`;
       string $ControlG = `group -n ($Control[0] + "_G") $Control[0]`;
       parent $ControlG $EveryFK;
       setAttr ($ControlG + ".translateX" ) 0;
       setAttr ($ControlG + ".translateY" ) 0;
       setAttr ($ControlG + ".translateZ" ) 0;
       setAttr ($ControlG + ".rotateX" ) 0;
       setAttr ($ControlG + ".rotateY" ) 0;
       setAttr ($ControlG + ".rotateZ" ) 90;
       delete -ch $ControlG;
       makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $ControlG;
       string $JointsParent[] = `listRelatives -p $EveryFK`;
       if(`size $JointsParent` == 1)
       {parent $ControlG $JointsParent;}
       else
       {parent -w $ControlG;}
       orientConstraint -offset 0 0 0 -weight 1 $Control[0] $EveryFK;
       connectAttr  ($Control[0]+".scale") ($EveryFK + ".scale");
       }
}
}
